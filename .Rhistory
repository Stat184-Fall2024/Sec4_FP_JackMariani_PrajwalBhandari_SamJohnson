theme(axis.text.x = element_text(angle = 80, vjust = 1, hjust = 1))
ggplot() +
geom_point(data = rep_dem_other, aes(x = state, y = mean_r, color = 'red')) +
geom_point(data = rep_dem_other, aes(x = state, y = mean_d, color = 'blue')) +
geom_point(data = rep_dem_other, aes(x = state, y = mean_o, color = 'green')) +
theme(axis.text.x = element_text(angle = 80, vjust = 0.8, hjust = 1))
ggplot() +
geom_point(data = rep_dem_other, aes(x = state, y = mean_r, color = 'red')) +
geom_point(data = rep_dem_other, aes(x = state, y = mean_d, color = 'blue')) +
geom_point(data = rep_dem_other, aes(x = state, y = mean_o, color = 'green')) +
theme(axis.text.x = element_text(angle = 80, vjust = 0.95, hjust = 1))
ggplot() +
geom_point(data = rep_dem_other, aes(x = state, y = mean_r, color = 'blue')) +
geom_point(data = rep_dem_other, aes(x = state, y = mean_d, color = 'red')) +
geom_point(data = rep_dem_other, aes(x = state, y = mean_o, color = 'green')) +
theme(axis.text.x = element_text(angle = 80, vjust = 0.95, hjust = 1))
rep_dem_other <- data %>%
group_by(state) %>%
summarize(
mean_r = mean(r_percent),
mean_d = mean(d_percent),
mean_o = mean(other_percent)
) %>%
mutate(state = fct_reorder(state, mean_r)) %>%
ggplot() +
geom_point(data = rep_dem_other, aes(x = state, y = mean_r, color = 'blue')) +
geom_point(data = rep_dem_other, aes(x = state, y = mean_d, color = 'red')) +
geom_point(data = rep_dem_other, aes(x = state, y = mean_o, color = 'green')) +
theme(axis.text.x = element_text(angle = 80, vjust = 0.95, hjust = 1))
rep_dem_other <- data %>%
group_by(state) %>%
summarize(
mean_r = mean(r_percent),
mean_d = mean(d_percent),
mean_o = mean(other_percent)
) %>%
mutate(state = fct_reorder(state, mean_r)) %>%
ggplot() +
geom_point(data = rep_dem_other, aes(x = state, y = mean_r, color = 'blue')) +
geom_point(data = rep_dem_other, aes(x = state, y = mean_d, color = 'red')) +
geom_point(data = rep_dem_other, aes(x = state, y = mean_o, color = 'green')) +
theme(axis.text.x = element_text(angle = 80, vjust = 0.95, hjust = 1))
ggplot() +
geom_point(data = rep_dem_other, aes(x = state, y = mean_r, color = 'blue')) +
geom_point(data = rep_dem_other, aes(x = state, y = mean_d, color = 'red')) +
geom_point(data = rep_dem_other, aes(x = state, y = mean_o, color = 'green')) +
theme(axis.text.x = element_text(angle = 80, vjust = 0.95, hjust = 1))
rep_dem_other <- data %>%
group_by(state) %>%
summarize(
mean_r = mean(r_percent),
mean_d = mean(d_percent),
mean_o = mean(other_percent)
) %>%
mutate(state = fct_reorder(state, mean_r))
ggplot() +
geom_point(data = rep_dem_other, aes(x = state, y = mean_r, color = 'blue')) +
geom_point(data = rep_dem_other, aes(x = state, y = mean_d, color = 'red')) +
geom_point(data = rep_dem_other, aes(x = state, y = mean_o, color = 'green')) +
theme(axis.text.x = element_text(angle = 80, vjust = 0.95, hjust = 1))
ggplot() +
geom_point(data = rep_dem_other, aes(x = state, y = mean_r, color = 'blue')) +
geom_smooth(color = 'blue')+
geom_point(data = rep_dem_other, aes(x = state, y = mean_d, color = 'red')) +
geom_point(data = rep_dem_other, aes(x = state, y = mean_o, color = 'green')) +
theme(axis.text.x = element_text(angle = 80, vjust = 0.95, hjust = 1))
ggplot() +
geom_point(data = rep_dem_other, aes(x = state, y = mean_r, color = 'blue')) +
geom_smooth(fill = 'blue')
data %>%
group_by(year) %>%
summarize(d_ev = sum(d_ev),
r_ev = sum(r_ev),
o_ev = sum(other_ev)
)  %>%
ggplot(
aes(x = year, y = d_ev)) +
geom_line()
geom_point(data = rep_dem_other, aes(x = state, y = mean_d, color = 'red')) +
geom_point(data = rep_dem_other, aes(x = state, y = mean_o, color = 'green')) +
theme(axis.text.x = element_text(angle = 80, vjust = 0.95, hjust = 1))
ggplot() +
geom_point(data = rep_dem_other, aes(x = state, y = mean_r, color = 'blue')) +
geom_smooth(fill = 'blue') +
geom_point(data = rep_dem_other, aes(x = state, y = mean_d, color = 'red')) +
geom_point(data = rep_dem_other, aes(x = state, y = mean_o, color = 'green')) +
theme(axis.text.x = element_text(angle = 80, vjust = 0.95, hjust = 1))
ggplot() +
geom_point(data = rep_dem_other, aes(x = state, y = mean_r, color = 'blue')) +
geom_point(data = rep_dem_other, aes(x = state, y = mean_d, color = 'red')) +
geom_point(data = rep_dem_other, aes(x = state, y = mean_o, color = 'green')) +
theme(axis.text.x = element_text(angle = 80, vjust = 0.95, hjust = 1))
data %>%
group_by(year) %>%
summarize(d_ev = sum(d_ev),
r_ev = sum(r_ev),
o_ev = sum(other_ev)
)  %>%
ggplot(
aes(x = year, y = d_ev)) +
geom_line()
source("C:/Users/pb601/OneDrive/Desktop/FA24 STAT184/final_project/fp_data_analysis.R", echo=TRUE)
# viewing the data on the web
esquissr(data = data, viewer = 'browser')
# viewing the data on the web
esquisser(data = data, viewer = 'browser')
# actual function to create the table:
create_clean_data <- function(){
# create empty data frame which we add our clean tables to
clean_data <- data.frame()
# write a loop to do this
for (year in seq(1980, 2020, by = 4)) {
#1980, 1992,1996
if (year %in% c(1980,1992,1996)){
clean_data <- rbind(clean_data, clean_80_92_96(year))
}
# 1984, 1998
if (year %in% c(1984,1988)) {
clean_data <- rbind(clean_data, clean_84_88(year))
}
#2000
if (year == 2000) {
clean_data <- rbind(clean_data, clean_2000())
}
#2004
if (year == 2004) {
clean_data <- rbind(clean_data, clean_2004())
}
# 2008
if (year == 2008) {
clean_data <- rbind(clean_data, clean_2008())
}
if (year == 2012) {
clean_data <- rbind(clean_data, clean_2012())
}
# 2016
if (year == 2016) {
clean_data <- rbind(clean_data, clean_2016())
}
#2020
if (year == 2020) {
clean_data <- rbind(clean_data, clean_2020())
}
}
# now that we have the data in a clean format, we can do some feature engineering to extract data which would be useful to us
data <- data %>%
mutate(
win_margin_votes = max(r_votes, d_votes) - min(r_votes, d_votes),
win_margin_percent = max(r_percent, d_percent) - min(r_percent, d_percent),
# winning party
winning_party = case_when(r_votes > d_votes & r_votes > other_votes ~ "Republican",
d_votes > r_votes & d_votes > other_votes ~ "Democrat",
other_votes > r_votes & other_votes > d_votes ~ "Other"),
total_ev = d_ev + r_ev + other_ev,
voters_per_ev = total_ev / total_votes,
ev_alloc = total_votes/total_ev,
# vote share ratio (d/r)
r_d_vote_ratio = r_votes/d_votes,
# third party significance
other_sig = other_votes/(r_votes + d_votes),
# measures if third party votes influenced the result of the state
third_party_swing_potential = other_votes > abs(r_votes - d_votes)
)
return(clean_data)
}
# now that we have the data in a tidy, clean and easy to work with format, we can start the analysis.
data <- create_clean_data()
View(data)
# we push the data to a google sheets document so that it is easier to retreive when working in the quarto document.
library(googlesheets4)
source("C:/Users/pb601/OneDrive/Desktop/FA24 STAT184/final_project/fp_data_cleaning_script.R", echo=TRUE)
source("C:/Users/pb601/OneDrive/Desktop/FA24 STAT184/final_project/fp_data_cleaning_script.R", echo=TRUE)
View(data)
# actual function to create the table:
create_clean_data <- function(){
# create empty data frame which we add our clean tables to
clean_data <- data.frame()
# write a loop to do this
for (year in seq(1980, 2020, by = 4)) {
#1980, 1992,1996
if (year %in% c(1980,1992,1996)){
clean_data <- rbind(clean_data, clean_80_92_96(year))
}
# 1984, 1998
if (year %in% c(1984,1988)) {
clean_data <- rbind(clean_data, clean_84_88(year))
}
#2000
if (year == 2000) {
clean_data <- rbind(clean_data, clean_2000())
}
#2004
if (year == 2004) {
clean_data <- rbind(clean_data, clean_2004())
}
# 2008
if (year == 2008) {
clean_data <- rbind(clean_data, clean_2008())
}
if (year == 2012) {
clean_data <- rbind(clean_data, clean_2012())
}
# 2016
if (year == 2016) {
clean_data <- rbind(clean_data, clean_2016())
}
#2020
if (year == 2020) {
clean_data <- rbind(clean_data, clean_2020())
}
}
# now that we have the data in a clean format, we can do some feature engineering to extract data which would be useful to us
clean_data <- clean_data %>%
mutate(
win_margin_votes = max(r_votes, d_votes) - min(r_votes, d_votes),
win_margin_percent = max(r_percent, d_percent) - min(r_percent, d_percent),
# winning party
winning_party = case_when(r_votes > d_votes & r_votes > other_votes ~ "Republican",
d_votes > r_votes & d_votes > other_votes ~ "Democrat",
other_votes > r_votes & other_votes > d_votes ~ "Other"),
total_ev = d_ev + r_ev + other_ev,
voters_per_ev = total_ev / total_votes,
ev_alloc = total_votes/total_ev,
# vote share ratio (d/r)
r_d_vote_ratio = r_votes/d_votes,
# third party significance
other_sig = other_votes/(r_votes + d_votes),
# measures if third party votes influenced the result of the state
third_party_swing_potential = other_votes > abs(r_votes - d_votes)
)
return(clean_data)
}
# now that we have the data in a tidy, clean and easy to work with format, we can start the analysis.
data <- create_clean_data()
data %>%
write_sheet(
ss =
gs4_get(
"https://docs.google.com/spreadsheets/d/1GT8UOmD4l2j88wCLfCAlh_R7r0jWCtsmoL84kVvDOlc/edit?usp=sharing"),
sheet = 'main'
)
View(data)
# actual function to create the table:
create_clean_data <- function(){
# create empty data frame which we add our clean tables to
clean_data <- data.frame()
# write a loop to do this
for (year in seq(1980, 2020, by = 4)) {
#1980, 1992,1996
if (year %in% c(1980,1992,1996)){
clean_data <- rbind(clean_data, clean_80_92_96(year))
}
# 1984, 1998
if (year %in% c(1984,1988)) {
clean_data <- rbind(clean_data, clean_84_88(year))
}
#2000
if (year == 2000) {
clean_data <- rbind(clean_data, clean_2000())
}
#2004
if (year == 2004) {
clean_data <- rbind(clean_data, clean_2004())
}
# 2008
if (year == 2008) {
clean_data <- rbind(clean_data, clean_2008())
}
if (year == 2012) {
clean_data <- rbind(clean_data, clean_2012())
}
# 2016
if (year == 2016) {
clean_data <- rbind(clean_data, clean_2016())
}
#2020
if (year == 2020) {
clean_data <- rbind(clean_data, clean_2020())
}
}
# now that we have the data in a clean format, we can do some feature engineering to extract data which would be useful to us
clean_data <- clean_data %>%
mutate(
win_margin_votes = pmax(r_votes, d_votes) - pmin(r_votes, d_votes),
win_margin_percent = pmax(r_percent, d_percent) - pmin(r_percent, d_percent),
# winning party
winning_party = case_when(r_votes > d_votes & r_votes > other_votes ~ "Republican",
d_votes > r_votes & d_votes > other_votes ~ "Democrat",
other_votes > r_votes & other_votes > d_votes ~ "Other"),
total_ev = d_ev + r_ev + other_ev,
voters_per_ev = total_ev / total_votes,
ev_alloc = total_votes/total_ev,
# vote share ratio (d/r)
r_d_vote_ratio = r_votes/d_votes,
# third party significance
other_sig = other_votes/(r_votes + d_votes),
# measures if third party votes influenced the result of the state
third_party_swing_potential = other_votes > abs(r_votes - d_votes)
)
return(clean_data)
}
# now that we have the data in a tidy, clean and easy to work with format, we can start the analysis.
data <- create_clean_data()
View(data)
# actual function to create the table:
create_clean_data <- function(){
# create empty data frame which we add our clean tables to
clean_data <- data.frame()
# write a loop to do this
for (year in seq(1980, 2020, by = 4)) {
#1980, 1992,1996
if (year %in% c(1980,1992,1996)){
clean_data <- rbind(clean_data, clean_80_92_96(year))
}
# 1984, 1998
if (year %in% c(1984,1988)) {
clean_data <- rbind(clean_data, clean_84_88(year))
}
#2000
if (year == 2000) {
clean_data <- rbind(clean_data, clean_2000())
}
#2004
if (year == 2004) {
clean_data <- rbind(clean_data, clean_2004())
}
# 2008
if (year == 2008) {
clean_data <- rbind(clean_data, clean_2008())
}
if (year == 2012) {
clean_data <- rbind(clean_data, clean_2012())
}
# 2016
if (year == 2016) {
clean_data <- rbind(clean_data, clean_2016())
}
#2020
if (year == 2020) {
clean_data <- rbind(clean_data, clean_2020())
}
}
# now that we have the data in a clean format, we can do some feature engineering to extract data which would be useful to us
clean_data <- clean_data %>%
mutate(
win_margin_votes = pmax(r_votes, d_votes) - pmin(r_votes, d_votes),
win_margin_percent = pmax(r_percent, d_percent) - pmin(r_percent, d_percent),
# winning party
winning_party = case_when(r_votes > d_votes & r_votes > other_votes ~ "Republican",
d_votes > r_votes & d_votes > other_votes ~ "Democrat",
other_votes > r_votes & other_votes > d_votes ~ "Other"),
total_ev = d_ev + r_ev + other_ev,
voters_per_ev = total_votes/total_ev,
# vote share ratio (d/r)
r_d_vote_ratio = r_votes/d_votes,
# third party significance
other_sig = other_votes/(r_votes + d_votes),
# measures if third party votes influenced the result of the state
third_party_swing_potential = other_votes > abs(r_votes - d_votes)
)
return(clean_data)
}
# now that we have the data in a tidy, clean and easy to work with format, we can start the analysis.
data <- create_clean_data()
# we push the data to a google sheets document so that it is easier to retreive when working in the quarto document.
library(googlesheets4)
data %>%
write_sheet(
ss =
gs4_get(
"https://docs.google.com/spreadsheets/d/1GT8UOmD4l2j88wCLfCAlh_R7r0jWCtsmoL84kVvDOlc/edit?usp=sharing"),
sheet = 'main'
)
gs4_auth()
data %>%
write_sheet(
ss =
gs4_get(
"https://docs.google.com/spreadsheets/d/1GT8UOmD4l2j88wCLfCAlh_R7r0jWCtsmoL84kVvDOlc/edit?usp=sharing"),
sheet = 'main'
)
# actual function to create the table:
create_clean_data <- function(){
# create empty data frame which we add our clean tables to
clean_data <- data.frame()
# write a loop to do this
for (year in seq(1980, 2020, by = 4)) {
#1980, 1992,1996
if (year %in% c(1980,1992,1996)){
clean_data <- rbind(clean_data, clean_80_92_96(year))
}
# 1984, 1998
if (year %in% c(1984,1988)) {
clean_data <- rbind(clean_data, clean_84_88(year))
}
#2000
if (year == 2000) {
clean_data <- rbind(clean_data, clean_2000())
}
#2004
if (year == 2004) {
clean_data <- rbind(clean_data, clean_2004())
}
# 2008
if (year == 2008) {
clean_data <- rbind(clean_data, clean_2008())
}
if (year == 2012) {
clean_data <- rbind(clean_data, clean_2012())
}
# 2016
if (year == 2016) {
clean_data <- rbind(clean_data, clean_2016())
}
#2020
if (year == 2020) {
clean_data <- rbind(clean_data, clean_2020())
}
}
# now that we have the data in a clean format, we can do some feature engineering to extract data which would be useful to us
clean_data <- clean_data %>%
mutate(
win_margin_votes = pmax(r_votes, d_votes) - pmin(r_votes, d_votes),
win_margin_percent = pmax(r_percent, d_percent) - pmin(r_percent, d_percent),
# winning party
winning_party = case_when(r_votes > d_votes & r_votes > other_votes ~ "Republican",
d_votes > r_votes & d_votes > other_votes ~ "Democrat",
other_votes > r_votes & other_votes > d_votes ~ "Other"),
total_ev = d_ev + r_ev + other_ev,
voters_per_ev = total_votes/total_ev,
# vote share ratio (d/r)
r_d_vote_ratio = r_votes/d_votes,
# third party significance
other_sig = other_votes/(r_votes + d_votes),
# measures if third party votes influenced the result of the state
third_party_swing_potential = other_votes > abs(r_votes - d_votes)
)
# one final change: in 2000, an elector abstained so we can add the missing EV to dc's total EV count
clean_data[264,16] <- 3
return(clean_data)
}
# now that we have the data in a tidy, clean and easy to work with format, we can start the analysis.
data <- create_clean_data()
data %>%
write_sheet(
ss =
gs4_get(
"https://docs.google.com/spreadsheets/d/1GT8UOmD4l2j88wCLfCAlh_R7r0jWCtsmoL84kVvDOlc/edit?usp=sharing"),
sheet = 'main'
)
source("C:/Users/pb601/OneDrive/Desktop/FA24 STAT184/final_project/fp_data_analysis.R", echo=TRUE)
# actual function to create the table:
create_clean_data <- function(){
# create empty data frame which we add our clean tables to
clean_data <- data.frame()
# write a loop to do this
for (year in seq(1980, 2020, by = 4)) {
#1980, 1992,1996
if (year %in% c(1980,1992,1996)){
clean_data <- rbind(clean_data, clean_80_92_96(year))
}
# 1984, 1998
if (year %in% c(1984,1988)) {
clean_data <- rbind(clean_data, clean_84_88(year))
}
#2000
if (year == 2000) {
clean_data <- rbind(clean_data, clean_2000())
}
#2004
if (year == 2004) {
clean_data <- rbind(clean_data, clean_2004())
}
# 2008
if (year == 2008) {
clean_data <- rbind(clean_data, clean_2008())
}
if (year == 2012) {
clean_data <- rbind(clean_data, clean_2012())
}
# 2016
if (year == 2016) {
clean_data <- rbind(clean_data, clean_2016())
}
#2020
if (year == 2020) {
clean_data <- rbind(clean_data, clean_2020())
}
}
# now that we have the data in a clean format, we can do some feature engineering
# to extract data which would be useful to use in the analysis.
clean_data <- clean_data %>%
mutate(
win_margin_votes = pmax(r_votes, d_votes) - pmin(r_votes, d_votes),
win_margin_percent = pmax(r_percent, d_percent) - pmin(r_percent, d_percent),
# winning party
winning_party = case_when(r_votes > d_votes & r_votes > other_votes ~ "Republican",
d_votes > r_votes & d_votes > other_votes ~ "Democrat",
other_votes > r_votes & other_votes > d_votes ~ "Other"),
total_ev = d_ev + r_ev + other_ev,
voters_per_ev = total_votes/total_ev,
# vote share ratio (r/d)
r_d_vote_ratio = r_votes/d_votes,
# third party significance
other_sig = other_votes/(r_votes + d_votes),
# measures if third party votes influenced the result of the state
third_party_swing_potential = other_votes > abs(r_votes - d_votes)
)
# one final change: in 2000, an elector abstained so we can add the missing EV to dc's total EV count
clean_data[264,16] <- 3
return(clean_data)
}
